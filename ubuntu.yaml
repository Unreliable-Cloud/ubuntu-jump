---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ubuntu
  labels:
    app: ubuntu
    role: jump
    version: jammy
spec:
  selector:
    matchLabels:
      app: ubuntu
      role: jump
  serviceName: ubuntu
  replicas: 1
  template:
    metadata:
      labels:
        app: ubuntu
        role: jump
        sidecar.istio.io/inject: "true"
        version: jammy
    spec:
      containers:
      - name: ubuntu
        image: docker.io/youvegotmoxie/ubuntu-jump:dev
        lifecycle:
          postStart:
            exec:
              command: ["/bin/bash", "/usr/local/share/startup_scripts/postStart.sh"]
        ports:
        - containerPort: 22
          name: ssh
        volumeMounts:
        - name: homedir
          mountPath: /home
        - name: ubuntu-jump-poststart
          mountPath: /usr/local/share/startup_scripts
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 50m
            memory: 64Mi
        readinessProbe:
          tcpSocket:
            port: ssh
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: ssh
          initialDelaySeconds: 10
          periodSeconds: 20
      volumes:
        - name: ubuntu-jump-poststart
          configMap:
            name: ubuntu-jump-poststart
  volumeClaimTemplates:
  - metadata:
      name: homedir
      labels:
        app: ubuntu
        role: jump
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: hcloud-volumes
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: ubuntu
    role: jump
  name: ubuntu-jump-poststart
data:
  postStart.sh: |
    #!/bin/bash
    if [[ $(id ubuntu) ]]; then
      echo "startup script: user already exists"
      exit 0
    else
      echo "startup script: configuring user"
      useradd -c "Ubuntu user" -d /home/ubuntu -m -s /bin/bash -G sudo ubuntu
      mkdir -p ~ubuntu/.ssh
      chmod 0700 ~ubuntu/.ssh
      cp /root/.ssh/authorized_keys ~ubuntu/.ssh/authorized_keys
      chmod 0600 ~ubuntu/.ssh/authorized_keys
    fi
      chown -Rv ubuntu: ~ubuntu
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ubuntu
    role: jump
  annotations:
    load-balancer.hetzner.cloud/ipv6-disabled: "true"
    load-balancer.hetzner.cloud/location: ash
    load-balancer.hetzner.cloud/protocol: tcp
    external-dns.alpha.kubernetes.io/hostname: ubuntu-jump.k8s.unreliable.cloud
  name: ubuntu-ssh
spec:
  selector:
    app: ubuntu
    role: jump
  ports:
  - port: 22
    targetPort: ssh
    protocol: TCP
    name: ssh
  type: LoadBalancer
  externalTrafficPolicy: Local
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  labels:
    app: ubuntu
    role: jump
  name: allow-ingress-ssh
spec:
  endpointSelector:
    matchLabels:
      app: ubuntu
      role: jump
  ingress:
    - fromCIDRSet:
        - cidr: 172.220.74.59/32
        - cidr: 5.161.38.189/32
        - cidr: 216.6.210.1/32
      toPorts:
        - ports:
            - port: "22"
              protocol: TCP
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  labels:
    app: ubuntu
    role: jump
  name: allow-egress-apt-dns
spec:
  endpointSelector:
    matchLabels:
      app: ubuntu
      role: jump
  egress:
    - toFQDNs:
        - matchPattern: "*.ubuntu.com"
      toPorts:
        - ports:
            - port: "443"
              protocol: ANY
        - ports:
            - port: "80"
              protocol: ANY
    - toEndpoints:
        - matchLabels:
            io.kubernetes.pod.namespace: kube-system
            k8s-app: kube-dns
      toPorts:
        - ports:
            - port: "53"
              protocol: UDP
          rules:
            dns:
              - matchPattern: "*"
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: allow-datadog
specs:
  - endpointSelector:
      matchLabels:
        app: ubuntu
        role: jump
    egress:
    - toEndpoints:
      - matchLabels:
          k8s:io.kubernetes.pod.namespace: datadog
    ingress:
    - fromEndpoints:
      - matchLabels:
          k8s:io.kubernetes.pod.namespace: datadog
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: allow-istio
specs:
  - endpointSelector:
      matchLabels:
        app: ubuntu
        role: jump
    egress:
    - toEndpoints:
      - matchLabels:
          k8s:io.kubernetes.pod.namespace: istio-system
    ingress:
    - fromEndpoints:
      - matchLabels:
          k8s:io.kubernetes.pod.namespace: istio-system
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: ubuntu-ssh
spec:
  hosts:
  - ubuntu-ssh.ubuntu-jump.svc.cluster.local
  tcp:
  - match:
    - port: 22
    route:
    - destination:
        host: ubuntu-ssh.ubuntu-jump.svc.cluster.local
        subset: main
      weight: 100
---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: ubuntu-ssh
spec:
  host: ubuntu-ssh.ubuntu-jump.svc.cluster.local
  subsets:
  - name: main
    labels:
      app: ubuntu
      role: jump
      version: jammy